import os
import csv
from glob import glob
import yaml


#Define and load config
configfile: "config3-samplesCSV_insecta.yaml"
config = yaml.safe_load(open("config3-samplesCSV_insecta.yaml"))


#Parse samples from csv
def parse_samples(samples_file):
    samples = {}
    with open(samples_file, mode='r') as infile:
        reader = csv.DictReader(infile)
        for row in reader:
            sample_id = row['ID']
            forward_read = row['forward']
            reverse_read = row['reverse']
            samples[sample_id] = {"R1": forward_read, "R2": reverse_read}
    return samples

samples = parse_samples(config["samples_file"])


#Define output directory
output_dir = "/gpfs/nhmfsa/bulk/share/data/mbl/share/scratch/MGE/"


expanded_files = expand(os.path.join(output_dir, "{gene}/{sample}_con_insecta_{gene}.fas"), sample=samples.keys(), gene=config["genes"])


rule all:
    input:
        expanded_files

#expand("{gene}/{sample}_r_{r}_cov_{cov}_n_{n}_s_{s}_con_{gene}.fas", sample=samples.keys(), gene=config["genes"]), r = config["r_params"], n = config["n_params"], cov = config["cov_params"]), s = config["s_params"]

print("Expanded target files:", expanded_files)



#Rule to ensure necessary directories exist
rule directories_exist:
    output:
        directory(os.path.join(output_dir, "raw_data")),
        directory(os.path.join(output_dir, "trimmed_data")),
    shell:
        """
        mkdir -p {output.raw_data} {output.trimmed_data}
        """


#Rule to handle .fastq.gz files and clean headers
rule gunzip_and_clean_headers:
    input:
        R1=lambda wildcards: samples[wildcards.sample]["R1"],
        R2=lambda wildcards: samples[wildcards.sample]["R2"]
    output:
        R1_temp=os.path.join(output_dir, "raw_data/{sample}_R1_temp.fastq"),
        R2_temp=os.path.join(output_dir, "raw_data/{sample}_R2_temp.fastq")
    shell:
        """
        # Check if input is gzipped and decompress if needed
        if [[ {input.R1} == *.gz ]]; then
            gzip -cd {input.R1} > {output.R1_temp}
        else
            cp {input.R1} {output.R1_temp}
        fi

        if [[ {input.R2} == *.gz ]]; then
            gzip -cd {input.R2} > {output.R2_temp}
        else
            cp {input.R2} {output.R2_temp}
        fi
        
        sed -i 's/ /_/g' {output.R1_temp}
        sed -i 's/ /_/g' {output.R2_temp}
        """



#Rule to run fastp for PE reads
rule fastp_pe:
    input:
        R1=os.path.join(output_dir, "raw_data/{sample}_R1_temp.fastq"),
        R2=os.path.join(output_dir, "raw_data/{sample}_R2_temp.fastq")
    output:
        R1_trimmed=os.path.join(output_dir, "trimmed_data/{sample}_R1_trimmed.fastq"),
        R2_trimmed=os.path.join(output_dir, "trimmed_data/{sample}_R2_trimmed.fastq"),
        report=os.path.join(output_dir, "trimmed_data/{sample}_fastp_report.html"),
        json=os.path.join(output_dir, "trimmed_data/{sample}_fastp_report.json")
    log:
        out=os.path.join(output_dir, "trimmed_data/{sample}_fastp.out"),
        err=os.path.join(output_dir, "trimmed_data/{sample}_fastp.err")
    shell:
        """
        fastp -i {input.R1} -I {input.R2} \
              -o {output.R1_trimmed} -O {output.R2_trimmed} \
              -a AGATCGGAAGAGCACACGTCTGAACTCCAGTCA \
              -A AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT \
              --dedup \
              --trim_poly_g \
              -h {output.report} -j {output.json} \
              > {log.out} 2> {log.err}
        """




#Rule to concatenate PE fastq files
rule fastq_concat:
    input:
        R1=os.path.join(output_dir, "trimmed_data/{sample}_R1_trimmed.fastq"),
        R2=os.path.join(output_dir, "trimmed_data/{sample}_R2_trimmed.fastq")
    output:
        temp(os.path.join(output_dir, "trimmed_data/{sample}_concat.fastq"))
    shell:
        """
        cat {input.R1} {input.R2} > {output}
        """



#Rule to trim concatenated fastq file
rule quality_trim:
    input:
        os.path.join(output_dir, "trimmed_data/{sample}_concat.fastq")
    output:
        os.path.join(output_dir, "trimmed_data/{sample}_concat_trimmed.fq")
    shell:
        """
        trim_galore --no_report_file --dont_gzip --output_dir {output_dir}/trimmed_data/ {input}
        """



#Rule to run MitoGeneExtractor on trimmed and concatenated fastq file
rule MitoGeneExtractor_default:
    input:
        DNA=os.path.join(output_dir, "trimmed_data/{sample}_concat_trimmed.fq"),
        AA="protein_references/insecta_{gene}.fasta"
    output:
        alignment=os.path.join(output_dir, "{gene}/{sample}_align_insecta_{gene}.fas"),
        consensus=os.path.join(output_dir, "{gene}/{sample}_con_insecta_{gene}.fas"),
        vulgar=os.path.join(output_dir, "{gene}/{sample}_vulgar.txt")
    log:
        out=os.path.join(output_dir, "{gene}/{sample}_summary.out"),
        err=os.path.join(output_dir, "{gene}/{sample}_summary.err")
    shell:
        """
        ../../MitoGeneExtractor-v1.9.5 -q {input.DNA} -p {input.AA} \
        -o {wildcards.gene}/{wildcards.sample}_align_ \
        -c {wildcards.gene}/{wildcards.sample}_con_ \
        -V {output.vulgar} \
        -n 0 -C 5 -r 1 -t 0.5 \
        > {log.out} 2> {log.err}
        """






#optional rule to provide different parameter combinations;
#this rule will only be executed if you change the required input of the rule all!
#rule MitoGeneExtractor_diff_params: 
#    input:
#        DNA = "trimmed_data/{sample}_concat_trimmed.fq",
#        AA = "protein_references/insecta_{gene}.fasta",
#        vulgar = "{gene}/{sample}_vulgar.txt"   
#    output:
#        a = "{gene}/{sample}_r_{r}_cov_{cov}_n_{n}_s_{s}_align_{gene}.fas",
#        b = "{gene}/{sample}_r_{r}_cov_{cov}_n_{n}_s_{s}_con_{gene}.fas"
#    shell:
#        "../../MitoGeneExtractor-v1.9.5 -q {input.DNA} -p {input.AA} \
#        -o {wildcards.gene}/{wildcards.sample}_r_{wildcards.r}_cov_{wildcards.cov}_n_{wildcards.n}_s_{wildcards.s}_align \
#        -c {wildcards.gene}/{wildcards.sample}_r_{wildcards.r}_cov_{wildcards.cov}_n_{wildcards.n}__s_{wildcards.s}_con \
#        -V {input.vulgar} -n {wildcards.n} -r {wildcards.r} --minSeqCoverageInAlignment_total {wildcards.cov} \
#        --verbosity 10"
